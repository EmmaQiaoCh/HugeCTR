# Please do not edit this file

FC_FORWARD_EVENTS = [
    'fused_fully_connected',
    'fused_fully_connected.cublasGemm',
    'fused_fully_connected.add_bias_and_re_kernel',
]

FC_BACKWARD_EVENTS = []

DRLM_EVENTS = {
    # interested event name
    'BottomMLP.fc1': {
        'same_name_events_occured_order_in_code_forward': 0,
        'same_name_events_occured_order_in_code_backward': 6,
        'forward_events': FC_FORWARD_EVENTS,
        'backward_events': FC_BACKWARD_EVENTS
    },
    'BottomMLP.fc2': {
        'same_name_events_occured_order_in_code_forward': 1,
        'same_name_events_occured_order_in_code_backward': 5,
        'forward_events': FC_FORWARD_EVENTS,
        'backward_events': FC_BACKWARD_EVENTS
    },
    'BottomMLP.fc3': {
        'same_name_events_occured_order_in_code_forward': 2,
        'same_name_events_occured_order_in_code_backward': 4,
        'forward_events': FC_FORWARD_EVENTS,
        'backward_events': FC_BACKWARD_EVENTS
    },
    'sparse_embedding1': {
        'same_name_events_occured_order_in_code_forward': 0,
        'same_name_events_occured_order_in_code_backward': 0,
        'forward_events': [],
        'backward_events': []
    },
    'interaction1': {
        'same_name_events_occured_order_in_code_forward': 0,
        'same_name_events_occured_order_in_code_backward': 0,
        'forward_events': [],
        'backward_events': []
    },
    'TopMLP.fc4': {
        'same_name_events_occured_order_in_code_forward': 3,
        'same_name_events_occured_order_in_code_backward': 3,
        'forward_events': FC_FORWARD_EVENTS,
        'backward_events': FC_BACKWARD_EVENTS
    },
    'TopMLP.fc5': {
        'same_name_events_occured_order_in_code_forward': 4,
        'same_name_events_occured_order_in_code_backward': 2,
        'forward_events': FC_FORWARD_EVENTS,
        'backward_events': FC_BACKWARD_EVENTS
    },
    'TopMLP.fc6': {
        'same_name_events_occured_order_in_code_forward': 5,
        'forward_events': FC_FORWARD_EVENTS,
        'same_name_events_occured_order_in_code_backward': 1,
        'backward_events': FC_BACKWARD_EVENTS
    },
    'TopMLP.fc7': {
        'same_name_events_occured_order_in_code_forward': 6,
        'forward_events': FC_FORWARD_EVENTS,
        'same_name_events_occured_order_in_code_backward': 0,
        'backward_events': FC_BACKWARD_EVENTS
    }
}


def generate_schedule(schedule, repeat_for_each_event=10, warmup_iterations=10, outfile='prof.schedule'):
    with open(outfile, 'w') as f:
        f.write(str(warmup_iterations))
        for layer in schedule:
            for interested_event in schedule[layer]:
                if interested_event in DRLM_EVENTS[layer]['forward_events']:
                    same_name_events_occured_order_in_code = DRLM_EVENTS[layer]['same_name_events_occured_order_in_code_forward']
                elif interested_event in DRLM_EVENTS[layer]['backward_events']:
                    same_name_events_occured_order_in_code = DRLM_EVENTS[layer]['same_name_events_occured_order_in_code_backward']
                else:
                    raise Exception("{} is not a registered event!")
                line = "\n{} {} {} {}".format(
                    interested_event,
                    repeat_for_each_event,
                    layer,
                    same_name_events_occured_order_in_code
                )
                f.write(line)